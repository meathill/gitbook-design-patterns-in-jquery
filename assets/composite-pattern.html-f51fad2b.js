import{_ as c,r as p,o as l,c as i,a as n,b as s,d as a,e}from"./app-df1eeafe.js";const u={},r=e('<h1 id="组合模式" tabindex="-1"><a class="header-anchor" href="#组合模式" aria-hidden="true">#</a> 组合模式</h1><blockquote><p>Composite Pattern，组合模式，属于结构型模式。</p></blockquote><blockquote><p>也是 jQuery 的基础 feature，所有 API 都基于这个模式工作。</p></blockquote><p>使用原生 JS 获取 DOM 节点，然后修改属性，也是很常见的做法，因为很多最佳实践说：这样很快！Realy Fast！比 jQuery 快得多！但是如果因为某种原因，获取 DOM 的时候节点尚不存在，进行操作时就会报错，在古老的 IE 里，左下角会出现一个小红叉。更严重的问题是，JS 是单线程的，报错之后，后面的代码都不会执行。所以，有时候，一个无关紧要的小错误，会影响页面核心逻辑的执行，造成很大的事故。</p><p>使用 jQuery 就不用担心这个问题，无论节点是否存在，无论符合选择器的节点有几个，接下来的操作总是可行的，也不会报错。</p><h2 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h2><p>我们前端大部分需求都是跟 DOM 打交道，有时候操作一个 DOM，有时候操作多个 DOM，但基本上操作方式是一样的。这个时候，使用组合模式，可以让使用者忽略单个对象和多个对象的区别，节省开发时间，增加程序弹性。</p><p>使用组合模式还方便我们增加新类型的组件。新增的组件可以很容易的加入组合，一起工作，而使用组合模式写出来的代码完全不需要修改。</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2><p>组合模式有两个重要的组成部分：组合（Composite），与元素（Leaf）。组合的实例都是 Array-like 的，任何操作，都会执行循环，遍历组合中的元素，分别执行具体方法。</p><p>元素可以是不同类型，比如在 jQuery 中，通过选择器在 DOM 中找到的节点，可以是 <code>&lt;img&gt;</code>，也可以是 <code>&lt;div&gt;</code>，它们有不同的属性和方法，但是都会实现一套接口，这样就可以一次性操作。</p><p>组合模式需要有 <code>.add()</code>，<code>.remove()</code> 等只操作组合的方法，方便在运行时调整它包含的元素集合。这些方法，如果和元素中的方法名重合，可以考虑将它们放在上一层的命名空间里（jQuery 没有这样做），或者加前缀。比如用 <code>Composite.remove(compositeInstance, item1, item2)</code>，或者 <code>composite.__selfAdd(item1)</code>。</p><p>组合模式要最大化组合的接口，即从元素的方法中取合集而不是交集，这样才可以尽可能复用组合，忽略具体元素。</p><h2 id="jquery-实现" tabindex="-1"><a class="header-anchor" href="#jquery-实现" aria-hidden="true">#</a> jQuery 实现</h2><p>每个 jQuery 实例都是组合模式对象，所以我们只需要在 <code>core</code> 中找一下，很快就能找到对应的实现。</p>',15),k={href:"https://github.com/jquery/jquery/blob/master/src/core.js#L39-L118",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jQuery<span class="token punctuation">.</span>fn <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">constructor</span><span class="token operator">:</span> jQuery<span class="token punctuation">,</span>

	<span class="token comment">// 组合长度</span>
	<span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>

	<span class="token comment">// 转换成数组</span>
	<span class="token function-variable function">toArray</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token comment">// 取出第 \`num\` 个元素</span>
	<span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">num</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ....</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token comment">// 取一些元素放入栈中并返回</span>
	<span class="token function-variable function">pushStack</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">elems</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ....</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token comment">// 对本组合中所有元素执行特定 callback</span>
	<span class="token function-variable function">each</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">callback</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> jQuery<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> callback <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token comment">// 对本组和中所有元素执行 callback，生成新的组合</span>
	<span class="token function-variable function">map</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">callback</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pushStack</span><span class="token punctuation">(</span> jQuery<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">elem<span class="token punctuation">,</span> i</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> elem<span class="token punctuation">,</span> i<span class="token punctuation">,</span> elem <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token comment">// 截取若干元素</span>
	<span class="token function-variable function">slice</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pushStack</span><span class="token punctuation">(</span> <span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token comment">// 取第一个元素</span>
	<span class="token function-variable function">first</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token comment">// 取最后一个元素</span>
	<span class="token function-variable function">last</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token comment">// 取第 N 个元素</span>
	<span class="token function-variable function">eq</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">i</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>
			j <span class="token operator">=</span> <span class="token operator">+</span>i <span class="token operator">+</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> len <span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pushStack</span><span class="token punctuation">(</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> len <span class="token operator">?</span> <span class="token punctuation">[</span> <span class="token keyword">this</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token comment">// 取出栈里面的元素</span>
	<span class="token function-variable function">end</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prevObject <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token comment">// 内部使用的函数</span>
	<span class="token literal-property property">push</span><span class="token operator">:</span> push<span class="token punctuation">,</span>
	<span class="token literal-property property">sort</span><span class="token operator">:</span> arr<span class="token punctuation">.</span>sort<span class="token punctuation">,</span>
	<span class="token literal-property property">splice</span><span class="token operator">:</span> arr<span class="token punctuation">.</span>splice
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v={href:"https://github.com/jquery/jquery/blob/master/src/css.js",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"css.js",-1),b=n("h2",{id:"javascript-和经典模式的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#javascript-和经典模式的区别","aria-hidden":"true"},"#"),s(" JavaScript 和经典模式的区别")],-1),h=n("p",null,[s("JS 里，我们不需要特意实现某种数据结构，Object 本身就可以存放任意类型的数据，并且数值本身也是合法的 "),n("code",null,"key"),s("。所以我们可以像 jQuery 一样，在对象里实现操作“组合”的方法即可。")],-1),y=n("p",null,[s("JS 使用原型链实现类的继承，所以我们只要实现一个 "),n("code",null,"Array-like"),s(" 的对象，然后把类的原型指向它即可。比普通面向对象语言要容易一些。")],-1),f=n("h2",{id:"适用性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#适用性","aria-hidden":"true"},"#"),s(" 适用性")],-1),_=n("p",null,"当你遇到类似下面的需求，应该考虑使用组合模式：",-1),j=n("ol",null,[n("li",null,"要操作一批类型接近、方法接近的元素"),n("li",null,"需要维护集合和元素")],-1);function w(g,Q){const t=p("ExternalLinkIcon"),o=p("adsense");return l(),i("div",null,[r,n("p",null,[s("以下代码来自于 "),n("a",k,[s("438b1a3"),a(t)]),s("，我摘抄了和组合模式相关的部分，它们基本上就是一些常规的维护集合的函数：")]),d,n("p",null,[s("操作元素的方法，会在具体的文件逐个赋给 jQuery.prototype，比如，CSS 操作就在 "),n("a",v,[m,a(t)]),s(" 里，大家可以自己慢慢看，因为并不涉及到组合模式，就不详细介绍了。")]),b,h,y,a(o),f,_,j])}const x=c(u,[["render",w],["__file","composite-pattern.html.vue"]]);export{x as default};
