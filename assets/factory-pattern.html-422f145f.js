import{_ as c,r as t,o as l,c as i,a as n,b as s,d as a,e as o}from"./app-df1eeafe.js";const u={},r=n("h1",{id:"工厂方法模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#工厂方法模式","aria-hidden":"true"},"#"),s(" 工厂方法模式")],-1),d=n("blockquote",null,[n("p",null,"Factory Method Pattern，工厂方法模式，经常简称为“工厂模式”，属于对象创建型模式")],-1),k=n("blockquote",null,[n("p",null,[s("对应 jQuery 中的 "),n("code",null,"jQuery()/$()"),s(" 方法。")])],-1),v=n("code",null,"$()",-1),m={href:"http://api.jquery.com/jQuery/",target:"_blank",rel:"noopener noreferrer"},b=o('<ol><li>选择器。这个应该是最常用的，可以从当前 DOM 中查找所有符合选择器的节点，并返回一个 jQuery 对象。</li><li>DOM 节点或者一个包含很多节点的数组。这个也比较常见，用于将 DOM 转换成 jQuery 对象方便接下来的操作，比如在事件响应函数里的 <code>$(this)</code>。</li><li><code>window</code>，<code>document</code> 等系统内建对象。主要用来获取宽高和绑定事件。</li><li>字符串，多半是一段 HTML 代码，jQuery 会先构建出 DOM，然后返回包含它的 jQuery 对象。</li><li>jQuery 对象，可以生成一个新的、包含同样 DOM 节点的对象。</li><li>函数，将会在 <code>DOMContentLoaded</code> 触发时执行。</li><li>Plain Object，（别说这个功能我还真没用过……）主要用来实现全局事件总线。</li></ol><p>从 v1.4 之后，jQuery 甚至支持不传任何参数，直接使用 <code>$()</code> 构建一个实例，然后再通过 <code>.add()</code> 之类的方法来组合需要的 DOM 节点。</p><h2 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h2><p>jQuery 将各种可能都放在 <code>$()</code> 里，可以大大降低开发者的学习成本：反正用 jQuery 就是要操作 DOM，所有疑似 DOM 的东西都可以扔到 <code>$()</code> 里，然后它就是 DOM 了，然后你就可以对它进行操作了，实在是简单的令人发指。</p><p>这就是工厂方法模式带来的好处。</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2><p>实际开发当中，很多时候，我们并不确定应该怎样实例化对象、实例化哪些对象。比如操作 DOM，有时候我们只知道选择器、有时候我们只知道 <code>this</code>、有时候我们已经掌握了一些节点，这个时候，如果不同的参数要用不同的构建方式，就会令使用者困惑，也增加出问题的几率。</p><p>工厂方法模式（Factory Method）在这里就可以发挥作用。它可以把具体的实例化操作延后，先进行一些计算，判断出应该怎么处理参数、应该实例化哪些对象，这样对使用者而言，初始化工作就很简单，使用的时候也可以忽略很多细节。可以更多地关注业务逻辑。</p><p>还有一点。面向对象讲究继承和多态，很多时候，我们只知道要用哪个大类，但是并不知道该用哪个子类。比如前文中的工资计算程序，我们只知道该用员工类，并不知道该用开发、销售、还是行政，这种问题只能通过工厂模式来解决。</p><h2 id="jquery-实现" tabindex="-1"><a class="header-anchor" href="#jquery-实现" aria-hidden="true">#</a> jQuery 实现</h2>',10),h={href:"https://github.com/jquery/jquery/blob/master/src/core/init.js",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/jquery/jquery/blob/master/src/core/init.js#L21-L118",target:"_blank",rel:"noopener noreferrer"},f=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>init <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">selector<span class="token punctuation">,</span> context<span class="token punctuation">,</span> root</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> match<span class="token punctuation">,</span> elem<span class="token punctuation">;</span>

  <span class="token comment">// 前文说过，v1.4 之后，可以创建不包含任何 DOM 节点的空 jQuery 对象</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>selector <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 处理字符串</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> selector <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理 HTML 字符串，特征是 \`&lt;tag&gt;....&lt;/tag&gt;\`</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> selector<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;&lt;&quot;</span> <span class="token operator">&amp;&amp;</span>
      selector<span class="token punctuation">[</span> selector<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;&gt;&quot;</span> <span class="token operator">&amp;&amp;</span>
      selector<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token comment">// ....</span>

    <span class="token comment">// 其它字符串，当作选择器处理</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      match <span class="token operator">=</span> rquickExpr<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ....</span>

  <span class="token comment">// 处理 DOM 节点 $(DOMElement)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> selector<span class="token punctuation">.</span>nodeType <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ....</span>

  <span class="token comment">// 处理函数: $(function)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> selector <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ....</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 处理其它情况</span>
  <span class="token keyword">return</span> jQuery<span class="token punctuation">.</span><span class="token function">makeArray</span><span class="token punctuation">(</span> selector<span class="token punctuation">,</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大体上，工厂方法模式需要实现一个方法。在方法中，根据参数类型和数量的不同，拼装出需要的实例或实例组。</p><h2 id="javascript-与经典模式的区别" tabindex="-1"><a class="header-anchor" href="#javascript-与经典模式的区别" aria-hidden="true">#</a> JavaScript 与经典模式的区别</h2><p>经典版工厂方法模式需要构造一个工厂类，然后实现“工厂方法”。而在 JavaScript 中，我们有独特的模块管理 API，所以不一定需要“工厂方法模式类”，大多数时候，我们只需要一个“工厂方法”：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> SomeBigClass <span class="token keyword">from</span> <span class="token string">&#39;./some-big-class&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">SomeBigClassFactory</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SomeBigClass</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  arg2 <span class="token operator">=</span> <span class="token function">doChange</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arg2 <span class="token operator">===</span> <span class="token string">&#39;some value&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SomeBigClass</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ...其它操作</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),g=n("h2",{id:"实用性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实用性","aria-hidden":"true"},"#"),s(" 实用性")],-1),_=n("p",null,"在以下情况你应该考虑使用工厂方法模式：",-1),j=n("ol",null,[n("li",null,"你有一个功能强大的类，它提供很多功能、覆盖了很多场景"),n("li",null,"在不同场合，这个类可以接受不同的参数，构建不太一样的功能"),n("li",null,"它还衍生出一些子类，可以实现更多更复杂的功能")],-1);function w(q,x){const e=t("ExternalLinkIcon"),p=t("adsense");return l(),i("div",null,[r,d,k,n("p",null,[s("用过 jQuery 的同学应该都会对 "),v,s(" 的用法印象深刻，几乎所有东西都可以当参数传进去。参考"),n("a",m,[s("官方文档"),a(e)]),s("，它支持如下参数类型：")]),b,n("p",null,[s("jQuery 的实现在 "),n("a",h,[s("GitHub"),a(e)]),s(" 上可以找到，代码格式清晰，有注释，建议大家好好读一下。")]),n("p",null,[s("以下代码摘自最新的 "),n("a",y,[s("cf84696"),a(e)]),s("，去掉了一些和本文不相关的部分，去掉了具体实现，只保留对参数类型和数量的判断，注释也根据工厂方法模式的：")]),f,a(p),g,_,j])}const Q=c(u,[["render",w],["__file","factory-pattern.html.vue"]]);export{Q as default};
