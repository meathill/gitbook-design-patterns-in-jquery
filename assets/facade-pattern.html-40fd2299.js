import{_ as a,r as t,o as p,c as e,d as o,e as c,a as n,b as l}from"./app-df1eeafe.js";const i={},u=c(`<h1 id="外观模式" tabindex="-1"><a class="header-anchor" href="#外观模式" aria-hidden="true">#</a> 外观模式</h1><blockquote><p>Facade Pattern，外观模式，属于结构型模式。</p></blockquote><blockquote><p>在 jQuery 里也不胜枚举，比如 DOM 操作、比如 <code>$.getJSON()</code>，以及最出彩的——选择器。</p></blockquote><p>我觉得，设计和实现 DOM API 的人很可能不写前端程序……美丑不论，早期的 DOM API 真的很难用，比如 <code>getElementById()</code>，意思倒是明确，但是拉拉撒撒写很长，能做的事情却很少。<code>getElementsByClassName()</code> 和 <code>getElementsByTagName()</code> 也差不多，而且，因为存在单复数的问题，在早期孱弱的编辑器里（早年甚至很多人用 Windows 自带的 记事本（Notepad）写代码），更是时不时就搞出些问题让人头痛。</p><p>如果只有一层选择器的话，其实还好，复合选择器会更难处理，比如 <code>#modal .model-footer button:first-child</code>。</p><p>但是使用 jQuery 就完全不用担心这些，你只需要把选择器通过 <code>$(selector)</code> 传给 jQuery，接下来就可以放心大胆的操作 DOM 了。</p><p>除此之外，jQuery 里还有很多外观模式的运用，极大的方便了我们操作 DOM，比如，<code>$(&#39;.selector&#39;).css(&#39;width&#39;, 100)</code> 可以直接将目标节点的宽度修改为 <code>100px</code>，而不需要手动加上 <code>px</code>，这极大的方便了我们计算数值。又或者改善我们从网络获取数据的体验，比如，在使用 <code>$.ajax()</code> 时传入参数 <code>dataType: &#39;jsonp&#39;</code>，就能方便的启动 JSONP，而不需要我们手动添加代码。</p><h2 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h2><p>从使用体验来说，外观模式和语法糖很像。使用外观模式，可以大大减少我们纠缠在语法实现的时间消耗，更容易专注于业务逻辑。</p><p>同样的，对于一些我们并不清楚内在逻辑的功能，外观模式还能赋予我们更强的实现能力，让我们更专注在自己负责的模块，提高团队协作的效率。</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2><p>以选择器为例，外观模式，会给子系统（比如 Web 中的 DOM）当中的一组接口（<code>getElementById()</code>，<code>getElementsByTagName()</code>, <code>getElementsByClassName()</code> 等）提供一个一致的界面（<code>$(&#39;#header .navbar .navbar-brand&#39;)</code>），这个接口使得这一子系统更加容易使用。</p><p>在团队协作时，我们每个人都会负责不同的模块，有些模块可能会被拆解成更多的子模块。不是模块负责人，可能很难搞清楚这些细碎的小模块要如何做合起来完成工作。这个时候，我们也可以提供外观模式的总接口，这样，负责其它模块的同事不需要搞清楚我的模块的内在逻辑，他只需要引用我的外观模式类，然后调用那个类里的方法，就能完成工作。</p><h2 id="jquery-实现" tabindex="-1"><a class="header-anchor" href="#jquery-实现" aria-hidden="true">#</a> jQuery 实现</h2><p>外观模式主要是一种设计思路，在结构上并没有非常明显的特征。这里就拿 jQuery 里 jsonp 的实现当作例子，看看它是怎么封装这个功能的吧：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在这一步，为了能够适用 jsonp，所以对 ajax 请求进行了一些封装</span>
jQuery<span class="token punctuation">.</span><span class="token function">ajaxSetup</span><span class="token punctuation">(</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">jsonp</span><span class="token operator">:</span> <span class="token string">&quot;callback&quot;</span><span class="token punctuation">,</span>
	<span class="token function-variable function">jsonpCallback</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> callback <span class="token operator">=</span> oldCallbacks<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span> jQuery<span class="token punctuation">.</span>expando <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span> nonce<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">[</span> callback <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> callback<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检查是否符合 jsonp 请求的特征，如果是的话，就增加 callback</span>
jQuery<span class="token punctuation">.</span><span class="token function">ajaxPrefilter</span><span class="token punctuation">(</span> <span class="token string">&quot;json jsonp&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">s<span class="token punctuation">,</span> originalSettings<span class="token punctuation">,</span> jqXHR</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token keyword">var</span> callbackName<span class="token punctuation">,</span> overwritten<span class="token punctuation">,</span> responseContainer<span class="token punctuation">,</span>
		jsonProp <span class="token operator">=</span> s<span class="token punctuation">.</span>jsonp <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> rjsonp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span>url <span class="token punctuation">)</span> <span class="token operator">?</span>
			<span class="token string-property property">&quot;url&quot;</span> <span class="token operator">:</span>
			<span class="token keyword">typeof</span> s<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">&amp;&amp;</span>
				<span class="token punctuation">(</span> s<span class="token punctuation">.</span>contentType <span class="token operator">||</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span> <span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
				rjsonp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span>data <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;data&quot;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 检查是否使用函数处理回调，是否要传入其它参数值</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> jsonProp <span class="token operator">||</span> s<span class="token punctuation">.</span>dataTypes<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;jsonp&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>

		<span class="token comment">// 获取回调函数的名称，获取需要传入的其它参数</span>
		callbackName <span class="token operator">=</span> s<span class="token punctuation">.</span>jsonpCallback <span class="token operator">=</span> jQuery<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span>jsonpCallback <span class="token punctuation">)</span> <span class="token operator">?</span>
			s<span class="token punctuation">.</span><span class="token function">jsonpCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>
			s<span class="token punctuation">.</span>jsonpCallback<span class="token punctuation">;</span>

		<span class="token comment">// 把回调函数放入 URL</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> jsonProp <span class="token punctuation">)</span> <span class="token punctuation">{</span>
			s<span class="token punctuation">[</span> jsonProp <span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span> jsonProp <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span> rjsonp<span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span> <span class="token operator">+</span> callbackName <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> s<span class="token punctuation">.</span>jsonp <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
			s<span class="token punctuation">.</span>url <span class="token operator">+=</span> <span class="token punctuation">(</span> rquery<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span>url <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;&amp;&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;?&quot;</span> <span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>jsonp <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> callbackName<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// ....</span>

		<span class="token comment">// 将回调函数放入全局上下文</span>
		overwritten <span class="token operator">=</span> window<span class="token punctuation">[</span> callbackName <span class="token punctuation">]</span><span class="token punctuation">;</span>
		window<span class="token punctuation">[</span> callbackName <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			responseContainer <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>

		<span class="token comment">// ....</span>

		<span class="token comment">// 将请求类型改为 script，因为 JSONP 请求得到的都是 script</span>
		<span class="token keyword">return</span> <span class="token string">&quot;script&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单补充下 JSONP 的知识。早年不存在跨域策略，所以浏览器跨域是严格禁止访问的。可是稍微大点的公司多半都有多个服务多个域名，那怎么才能跨域使用这些服务呢？一方面，可以用一台服务器作为代理，但是这样又会引发别的问题；另一种方案，就是 JSONP。</p><p>我们知道，通过 <code>&lt;script&gt;</code> 标签引入的 JS 是没有跨域问题的，那么，假如这个 <code>&lt;script&gt;</code> 标签的 <code>src</code> 指向一个动态生成的 JS，这个 JS 里是一个函数调用，原本需要远程加载的数据，通过参数传进去，跨域的问题不就解决了么？</p><p>JSONP 就是这样的方案，它的兼容性非常好。唯一的实施难点，就在于远程加载的 JS 运行在全局上下文，所以我们经常需要想办法暴露一个命令到 <code>window</code>，jQuery 实际上就帮我们完成这个工作。</p><h2 id="javascript-和经典模式的区别" tabindex="-1"><a class="header-anchor" href="#javascript-和经典模式的区别" aria-hidden="true">#</a> JavaScript 和经典模式的区别</h2><p>在外观模式上，JS 的实现和经典模式没有什么特殊区别。</p>`,21),r=n("h2",{id:"适用性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#适用性","aria-hidden":"true"},"#"),l(" 适用性")],-1),k=n("p",null,"遇到类似下面的需求，你应该考虑使用外观模式：",-1),d=n("ol",null,[n("li",null,"某些操作局限在某个子系统当中，希望暴露给其它模块统一好用的接口"),n("li",null,"你写了若干小模块，可以完成某个大功能，但日后常用的是大功能"),n("li",null,"团队协作时，每个人最好都给自己的模块建立合适的外观")],-1);function v(m,b){const s=t("adsense");return p(),e("div",null,[u,o(s),r,k,d])}const j=a(i,[["render",v],["__file","facade-pattern.html.vue"]]);export{j as default};
